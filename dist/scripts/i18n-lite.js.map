{
  "version": 3,
  "sources": [
    "CatLab/i18n-lite/Translate.js",
    "i18n-lite.js"
  ],
  "names": [],
  "mappingshUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA",
  "file": "scripts/i18n-lite.js",
  "sourcesContent": [
    "define(\n    'CatLab/i18n-lite/Translate', [\n        'simply-deferred',\n        'sprintf',\n        'js-cookie',\n        'axios'\n    ],\n    function (\n        Deferred,\n        sprintf,\n        Cookies,\n        axios\n    ) {\n        \"use strict\";\n\n        var Translate = function () {\n\n            this.defaultLanguage = 'en';\n            this.language = null;\n            this.translations = {};\n            this.cookie = 'language';\n            this.path = '/locales/';\n\n            this.overrides = {};\n\n            this.otherBundles = [];\n        };\n\n        var p = Translate.prototype;\n\n        var args;\n        var i;\n        var tmp;\n\n        p.initialize = function (options) {\n            if (typeof (options) === 'undefined') {\n                options = {};\n            }\n\n            if (typeof (options.path) !== 'undefined') {\n                this.path = options.path;\n            }\n\n            this.defaultLanguage = options.defaultLanguage || 'en';\n            this.tracker = options.tracker || null;\n            this.cookie = options.cookie || 'language';\n\n            if (typeof(options.language) !== 'undefined') {\n                this.language = options.language;\n            }\n\n            if (this.language === null) {\n                this.language = this.getLanguage();\n            }\n\n            var deferred = new Deferred();\n            this.deferred = deferred;\n\n            axios.get(this.path + 'languages.json')\n                .then(function (response) {\n                        this.translations = [];\n                        this.tryLoadTranslations([this.language ]);\n                    }.bind(this)\n                )\n\n                .catch(function () {\n                    deferred.resolve();\n                }.bind(this));\n\n            return deferred;\n        };\n\n        /**\n         * Get a bundle (pre-initialized) by a locale.\n         * @param locale\n         * @returns {Translate|*}\n         */\n        p.getBundle = function(locale) {\n            if (this.language === locale) {\n                var deferred = new Deferred();\n                deferred.resolve(this);\n                return deferred;\n            }\n\n            if (typeof(this.otherBundles[locale]) !== 'undefined') {\n                return this.otherBundles[locale];\n            }\n\n            this.otherBundles[locale] = new Deferred();\n\n            // create a new translation, load it and resolve the deferred state.\n            var language = new Translate();\n            language.initialize({\n                defaultLanguage: this.defaultLanguage,\n                language: locale,\n                path: this.path\n            }).then(function() {\n                this.otherBundles[locale].resolve(language);\n            }.bind(this));\n\n            return this.otherBundles[locale];\n        };\n\n        /**\n         * Get current language\n         * @returns string\n         */\n        p.getLanguage = function () {\n            var language;\n\n            if (this.cookie && Cookies.get(this.cookie)) {\n                language = Cookies.get(this.cookie);\n            } else if (typeof(navigator) !== 'undefined' && typeof (navigator.language) !== 'undefined') {\n                language = navigator.language.substr(0, 2);\n            } else {\n                language = this.defaultLanguage;\n            }\n\n            return language;\n        };\n\n        /**\n         * Go trough all provided translations and stop as soon\n         * as we have succesfully loaded one.\n         * @param locales\n         */\n        p.tryLoadTranslations = function (locales) {\n\n            var locale = locales.shift();\n\n            axios.get(this.path + locale + \".json\").then(function (response) {\n                this.setTranslation(response.data);\n            }.bind(this)).catch(function () {\n                if (locales.length > 0) {\n                    this.tryLoadTranslations(locales);\n                } else {\n                    this.noTranslation();\n                }\n            }.bind(this));\n\n        };\n\n        p.setTranslation = function (bundle) {\n            this.translations = bundle;\n            this.deferred.resolve();\n        };\n\n        p.noTranslation = function () {\n            this.deferred.resolve();\n        };\n\n        p.translate = function (string) {\n            if (string === \"\") {\n                return string;\n            }\n\n            args = [];\n            for (i = 0; i < arguments.length; i++) {\n                args.push(arguments[i]);\n            }\n\n            string = args.shift();\n\n            // Also check first variable\n            tmp = null;\n\n            if (args.length > 0) {\n                tmp = this.getArgumentNumericValue(args[0]);\n            }\n\n            if (tmp !== null) {\n                this.track(string, true);\n                string = this.getTranslation(string, tmp);\n            } else {\n                this.track(string, false);\n                string = this.getTranslation(string);\n            }\n\n            return sprintf.vsprintf(string, args);\n        };\n\n        // Alias.\n        p.t = p.translate;\n        p._ = p.translate;\n\n        p.track = function (string, isPluralizable) {\n            if (typeof(window) === 'undefined') {\n                return;\n            }\n\n            var img = new Image();\n            img.src = sprintf.vsprintf(\n                this.tracker,\n                [\n                    encodeURIComponent(string),\n                    isPluralizable ? 1 : 0\n                ]\n            );\n        };\n\n        p.getPluralized = function (options, amount) {\n            if (amount === 0 || amount > 1) {\n                if (typeof (options.plural) !== 'undefined') {\n                    return options.plural;\n                }\n            } else {\n                if (typeof (options.single) !== 'undefined') {\n                    return options.single;\n                }\n            }\n\n            // Not found? Return first value.\n            for (var key in options) {\n                if (options.hasOwnProperty(key)) {\n                    return options[key];\n                }\n            }\n        };\n\n        /**\n         * Translate a string.\n         * @param string\n         * @param amount\n         * @returns {*|boolean}\n         */\n        p.getTranslation = function (string, amount) {\n            var value = this.getResourceProperty(string);\n\n            if (value === null) {\n                return string;\n            }\n\n            if (typeof (value) === 'object') {\n                return this.getPluralized(value, amount);\n            }\n\n            return value;\n        };\n\n        /**\n         * Check if we do have a stranslation for a certain string.\n         * @param key\n         * @returns {boolean}\n         */\n        p.hasTranslation = function(key) {\n            return this.hasResourceProperty(key);\n        };\n\n        /**\n         * Check if a property / translation is found.\n         * @param key\n         * @returns {boolean}\n         */\n        p.hasResourceProperty = function(key) {\n            if (key === \"\") {\n                return false;\n            }\n\n            if (typeof(this.overrides[key]) !== 'undefined') {\n                return true;\n            }\n\n            if (typeof (this.translations.resources) === 'undefined') {\n                return false;\n            }\n\n            return typeof (this.translations.resources[key]) !== 'undefined';\n        };\n\n        /**\n         * @param key\n         * @returns {boolean|*}\n         */\n        p.getResourceProperty = function(key) {\n            if (typeof(this.overrides[key]) !== 'undefined') {\n                return this.overrides[key];\n            }\n\n            if (typeof (this.translations.resources) === 'undefined') {\n                return null;\n            }\n\n            if (typeof (this.translations.resources[key]) === 'undefined') {\n                return null;\n            }\n\n            return this.translations.resources[key];\n        };\n\n        p.changeLanguage = function (language) {\n            this.language = language.substr(0, 2);\n            Cookies.set(this.cookie, language, {expires: 365});\n        };\n\n        p.getArgumentNumericValue = function (argument) {\n            if (this.isNumeric(argument)) {\n                return parseFloat(argument);\n            }\n            return null;\n        };\n\n        p.isNumeric = function(obj) {\n            var type = typeof obj;\n            return ( type === \"number\" || type === \"string\" ) &&\n                !isNaN( obj - parseFloat( obj ) );\n        };\n\n        /**\n         * Override a given key with a (temporary) custom value.\n         * @param key\n         * @param value\n         */\n        p.override = function(key, value) {\n            this.overrides[key] = value;\n        }\n\n        return Translate;\n    }\n);\n\n",
    "define (\n\t'i18n-lite',\n\t[\n\t\t'CatLab/i18n-lite/Translate'\n\t],\n\tfunction (Translate) {\n\t\treturn new Translate ();\n\t}\n);\n"
  ]
}